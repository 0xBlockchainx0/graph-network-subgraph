"""Graph Network global parameters"""
type GraphNetwork @entity {
  "id = 1"
  id: ID
  "Contract address"
  graphToken: Bytes!
  "Contract address"
  epochManager: Bytes!
  "Contract address"
  curation: Bytes!
  "Contract address"
  staking: Bytes!
  "Contract address"
  disputeManager: Bytes!
  "Set to true if the protocol is paused"
  paused: Boolean!

  # Staking global variables
  "Percentage of fees going to curators"
  curationPercentage: BigInt!
  "Capacity of staked delegation tokens to own stake"
  delegationCapacity: Int!
  "Period to wait before fees can be claimed in rebate pool"
  channelDisputeEpochs: BigInt!
  "Period to wait before delegators can settle"
  maxAllocationEpochs: BigInt!
  "Time in blocks needed to wait to unstake"
  thawingPeriod: BigInt!
  "All addresses that have slashing privileges"
  slashers: [Bytes!]
  "Minimum time an Indexer must use for resetting their Delegation parameters"
  minDelegationParameterCooldown: Int!
  "The number of indexing rewards handed out per epoch"
  indexingRewardsPerEpoch: Int!
  "The issuance rate that GRT is minted at to support Indexers of the protocol"
  networkGRTIssuance: Int!

  # Curation global variables
  "Default reserve ratio for all subgraphs"
  defaultReserveRatio: BigInt!
  "Minimum amount of tokens needed to start curating"
  minimumCurationSignal: BigInt!

  # Graph Token global variables
  "Graph Token supply"
  totalSupply: BigInt!

  # Epoch Manager global variables
  "Epoch Length in blocks"
  epochLength: Int!
  "Epoch that was last run"
  lastRunEpoch: Int!
  "Epoch when epoch length was last updated"
  lastLengthUpdateEpoch: Int!
  "Block when epoch length was last updated"
  lastLengthUpdateBlock: Int!

  # Dispute Manager global variables
  "Address with permission to verify or reject disputes"
  arbitrator: Bytes!
  "Minimum deposit to create a dispute"
  minimumDisputeDeposit: BigInt!
  "Reward to Fisherman on successful disputes"
  fishermanRewardPercentage: BigInt!
  "Penalty to Indexer on successful disputes"
  slashingPercentage: BigInt!
}

"""Account type is a user in the front end which could be doing any actions"""
type Account @entity {
  # From GNS
  "Eth address"
  id: Bytes!
  "IPFS hash with account metadata details"
  metadataHash: Bytes!
  "Name of the account"
  name: String!

  # From Graph Token
  "Graph token balance"
  balance: BigInt!

  # From Staking and Curating and Delegating
  "Subgraphs this account curates"
  curator: Curator
  "Subgraphs this account indexes"
  indexer: Indexer
  "Subgraphs this account has delegated to"
  delegator: Delegator
}

"""Subgraph contains all SubgraphVersions and metadata"""
type Subgraph @entity {
  # From GNS
  "Hash of the domain name"
  id: ID!
  "System used for naming"
  nameSystem: String
  "Name of the subgraph"
  name: String!
  "Owner of this subgraph"
  owner: Account!
  "Versions of this subgraph. Last version in array is current"
  versions: [SubgraphVersion!]


  # Metadata from IPFS linked in GNS
  "Subgraph metadata"
  metadataHash: Bytes!
  "Short description of the subgraph"
  description: String!
  "Image in string format"
  image: String!
  "Subtitle for display"
  subtitle: String!
  "Display name for subgraph"
  displayName: String!
  "Location of the code for this project"
  repoAddress: String!
  "Project's website"
  websiteURL: String!
  "Network that the subgraph is indexing"
  network: String!
  "Creation timestamp"
  createdAt: Int!
  "Deploy timestamp"
  updatedAt: Int!

  # From Subgraph Manifest
  dataSources: [DataSource!]!

  # Aggregate data
  "Total inflation rewards earned all time by this subgraph"
  totalSubraphIndexingRewards: BigInt!
  "Total query fees earned by this subgraph"
  totalQueryFeesCollected: BigInt!
  "Total stake of all indexers on all Subgraph Versions"
  totalStake: BigInt!
  "Total signal of all curators on all Subgraph Versions"
  totalSignal: BigInt!
}

"""Data source obtained from the subgraph manifest"""
type DataSource @entity {
  "Unique identifier of the data source. Such as contract address"
  id: ID
  "Data source name in the manifest"
  name: String!
  "Network "
  network: String!  
}

"""SubgraphVersion represents a single instance of a Subgraph with a unique Subgraph ID"""
type SubgraphVersion @entity {
  "Subgraph ID"
  id: Bytes!
  "The subgraph this version is related to"
  subgraph: Subgraph!
  "Creation timestamp"
  createdAt: Int!

  # From Staking
  "Total stake of all indexers on this Subgraph"
  totalStake: BigInt!
  "Indexers of this subgraph"
  indexers: [Channel!] @derivedFrom(field: "subgraph")
  "Total fees accrued all time by this subgraph version"
  totalSubraphIndexingRewards: BigInt!

  # From Curation
  "Total signal of all curators"
  totalSignaledGRT: BigInt!
  "Total curation signal on this subgraph version"
  totalSignalMinted: BigInt!
  "Total query fees earned by this subgraph version"
  totalQueryFeesCollected: BigInt!
  "Curators of this subgraph version"
  curators: [CuratorSignal!] @derivedFrom(field: "subgraph")
  "Bonding curve reserve ratio"
  reserveRatio: BigInt!
}

"""Indexer represents metadata of the indexer all of its stake and delegator stake"""
type Indexer @entity {
  "Eth address of Indexer"
  id: Bytes!
  "Time this indexer was created"
  createdAt: Int!
  "Account of this indexer"
  account: Account!
  "Service registry URL string"
  urlString: String!
  "Total tokens staked"
  stakedTokens: BigInt!
  "Total tokens allocated"
  tokensAllocated: BigInt!
  "Total tokens locked"
  tokensLocked: BigInt!
  "Time when Indexers tokens unlock"
  tokensLockedUntil: Int!
  "Channels this indexer is currently staked on"
  channels: [Channel!] @derivedFrom(field: "indexer")

  # Delegator fields
  "Delegators to this Indexer"
  delegators: [DelegatorStake!] @derivedFrom(field: "indexer")
  "Total tokens delegated to the indexer"
  tokensDelegated: BigInt!
  "Total tokens available to be delegated"
  tokenCapacity: BigInt!
  "The amount of inflation the Indexer agrees to share with delegators"
  inflationSharePercentage: Int!
  "The amount of rebate rewards the Indexer agrees to share with delegators"
  rebateSharePercentage: Int!
  "Time delegator decides to wait for changing of their parameters"
  delegatorParameterCooldown: Int!
  "Count of how many times this indexer has been forced to settle"
  forcedSettlements: Int!
}

"""Allocation represents the continuous stake of an Indexer on a Subgraph, which is the accumulation of Channels between an indexer and a subgraph"""
type Allocation @entity {
  "Indexer ID concatenated with the Subgraph ID"
  id: ID!
  "Indexer of this Allocation"
  indexer: Indexer!
  "Subgraph of this Allocation"
  subgraph: Subgraph!
  "Active Channel. Null if this Indexer is no longer indexing this subgraph"
  activeChannel: Channel
  "Past channels that have been closed for this allocation"
  closedChannels: [Channel!] @derivedFrom(field: allocation)
}

"""State channel allocation representing Indexer-Subgraph stake"""
type Channel @entity {
  "Channel Address"
  id: Bytes!
  "Indexer of this channel"
  indexer: Indexer!
  "Subgraph that is being staked on with an open channel"
  subgraph: SubgraphVersion!
  "Allocation this channel is a part of"
  allocation: Allocation!
  "Tokens in this channel"
  tokensAllocated: BigInt!
  "Epoch this channel was created"
  createdAtEpoch: Int!
  "Fees this channel collected upon closing"
  feesCollected: BigInt!
  "Curator rewards deposited to the curating bonding curve"
  curatorReward: BigInt!
  "Epoch number of the Pool it was settled in"
  settled: Pool
}

"""Global pool of query fees for settled state channels after Curation rewards have been removed. One pool per epoch"""
type Pool @entity {
  "Epoch number of the pool"
  id: ID!
  "Total fees earned in this epoch"
  fees: BigInt!
  "Total allocation settled in this epoch"
  allocation: BigInt!
  "Total rewards deposited to all curator bonding curves during the epoch"
  curatorReward: BigInt!
  "Channels that were settled during this epoch"
  settled: [Channel!] @derivedFrom(field: settled)
}

"""All data regarding an Indexing Reward handed out per epoch"""
type IndexingReward @entity {
  "Epoch number of the reward"
  id: ID!
  "Minted GRT in this epoch"
  mintedGRT: BigInt!
  "Total allocation settled in this epoch"
  allocation: BigInt!
  "Channels that were settled during this epoch"
  winners: [RewardWinners!] @derivedFrom(field: settled)
  "Subgraph that won durning this epoch"
  subgraph: SubgraphVersion!
}

"""A winner during an Indexing Reward given out during an Epoch"""
type RewardWinners @entity {
  "Concatenation of IndexingReward ID and the Reward ID"
  id: ID!
  "Indexing Reward this Winner was a part of"
  reward: IndexingReward!
  "Winning Indexer"
  indexer: Indexer!
  "True if reward has been claimed"
  reward: Boolean!  
}

"""Delegator with all their stakes"""
type Delegator @entity {
  "Delegator address"
  id: Bytes!
  "Stakes of this delegator"
  stakes: [DelegatedStake!] @derivedFrom(field: "delegator")
}

"""Delegator stake for a single Indexer"""
type DelegatedStake @entity {
  "Concatenation of Delegator address and Indexer address"
  id: ID!
  "Index the stake is delegated to"
  indexer: Indexer!
  "Delegator"
  delegator: Delegator!
  "Amount delegated"
  stake: BigInt!
}

"""Curator with all their signals"""
type Curator @entity {
  "Eth address of the Curator"
  id: Bytes!
  "Subgraphs the curator is curating"
  signals: [Signal!] @derivedFrom(field: "curator")
}

"""Curator signal for a single Subgraph"""
type Signal @entity {
  "Eth address + subgraph ID"
  id: ID!
  "Eth address of the curator"
  curator: Curator!
  "Subgraph being signaled"
  subgraph: SubgraphVersion!
  "Cumulative number of tokens the curator has signaled"
  tokensSignaled: BigInt!
  "Cumulative number of tokens the curator has redeemed"
  tokensRedeemed: BigInt!
  "Signal that the curator has from signaling their GRT"
  signal: BigInt!
}

"""Dispute of a query. Includes both normal and attestation Disputes"""
type Dispute @entity {
  "Dispute ID"
  id: ID!
  "Subgraph of the dispute"
  subgraph: SubgraphVersion!
  "Indexer disputed. If an attestation dispute there will be 2 indexers"
  indexers: [Indexer!]!
  "Fisherman address"
  fisherman: Bytes!
  "Fisherman deposit"
  deposit: BigInt!
  "Attestation disputed. If an attestation dispute there will be 2 attestation"
  attestation: [Attestation]!
  "Time dispute was created"
  createdAt: Int!
  "Result of either type of dispute"
  result: DisputeResult!
  "Tokens slashed"
  tokensSlashed: BigInt!
  "Tokens rewarded"
  tokensRewarded: BigInt!  
}

"""Attestation of a dispute"""
type Attestation @entity {
  "Concatenation of the requestCID and responseCID"
  id: ID!
  "Subgraph ID of the subgraph being disputed"
  subgraphID: Bytes!
  "RequestCID"
  requestCID: String!
  "ResponseCID"
  responseCID: String!
  "Gas used by the attested query"
  gasUsed: BigInt!
  "Bytes of attested query"
  responseNumBytes: BigInt!
  "V of the indexers signature"
  v: Int!
  "R of the indexers signature"
  r: Bytes!
  "S of the indexers signature"
  s: Bytes!
}

enum DisputeResult {
  Undecided
  Accepted
  Rejected
  Ignored
  Indexer1Correct
  Indexer2Correct
}
